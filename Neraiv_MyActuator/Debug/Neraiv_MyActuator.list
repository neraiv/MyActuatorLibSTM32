
Neraiv_MyActuator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c34  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002dbc  08002dbc  00003dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dd4  08002dd4  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002dd4  08002dd4  00003dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ddc  08002ddc  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ddc  08002ddc  00003ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002de0  08002de0  00003de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002de4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000400c  2**0
                  CONTENTS
 10 .bss          00000150  20000010  20000010  00004010  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000160  20000160  00004010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ae16  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ece  00000000  00000000  0000ee52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000910  00000000  00000000  00010d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006e0  00000000  00000000  00011630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020c02  00000000  00000000  00011d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c4d9  00000000  00000000  00032912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4bb4  00000000  00000000  0003edeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010399f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000023c8  00000000  00000000  001039e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  00105dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002da4 	.word	0x08002da4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08002da4 	.word	0x08002da4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <myInitCanbus>:

void myErrorHandler(){

}

int8_t myInitCanbus(MyCan* myCan){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	myCan->canFilter.FilterActivation = ENABLE;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	2201      	movs	r2, #1
 80004c4:	625a      	str	r2, [r3, #36]	@ 0x24
	myCan->canFilter.FilterBank = 0;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	2200      	movs	r2, #0
 80004ca:	619a      	str	r2, [r3, #24]
	myCan->canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	2200      	movs	r2, #0
 80004d0:	61da      	str	r2, [r3, #28]
	myCan->canFilter.FilterFIFOAssignment = CAN_RX_FIFO0;
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	2200      	movs	r2, #0
 80004d6:	615a      	str	r2, [r3, #20]
	myCan->canFilter.FilterIdHigh = 0;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	2200      	movs	r2, #0
 80004dc:	605a      	str	r2, [r3, #4]
	myCan->canFilter.FilterIdLow = 0;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
	myCan->canFilter.FilterMaskIdHigh = 0x0000;
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]
	myCan->canFilter.FilterMaskIdLow = 0x0000;
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	2200      	movs	r2, #0
 80004ee:	611a      	str	r2, [r3, #16]
	myCan->canFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2201      	movs	r2, #1
 80004f4:	621a      	str	r2, [r3, #32]
	myCan->canFilter.SlaveStartFilterBank = 14;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	220e      	movs	r2, #14
 80004fa:	629a      	str	r2, [r3, #40]	@ 0x28

	myCan->tx.header.IDE = CAN_ID_STD;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	2200      	movs	r2, #0
 8000500:	635a      	str	r2, [r3, #52]	@ 0x34
	myCan->tx.header.DLC = 8;
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2208      	movs	r2, #8
 8000506:	63da      	str	r2, [r3, #60]	@ 0x3c

	if(HAL_CAN_ConfigFilter(myCan->hcan, &myCan->canFilter) != HAL_OK){
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	3304      	adds	r3, #4
 8000510:	4619      	mov	r1, r3
 8000512:	4610      	mov	r0, r2
 8000514:	f000 fc0a 	bl	8000d2c <HAL_CAN_ConfigFilter>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <myInitCanbus+0x6a>
		return 1;
 800051e:	2301      	movs	r3, #1
 8000520:	e00a      	b.n	8000538 <myInitCanbus+0x80>
	}
	if(HAL_CAN_Start(myCan->hcan) != HAL_OK){
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	4618      	mov	r0, r3
 8000528:	f000 fce0 	bl	8000eec <HAL_CAN_Start>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <myInitCanbus+0x7e>
		return 1;
 8000532:	2301      	movs	r3, #1
 8000534:	e000      	b.n	8000538 <myInitCanbus+0x80>
	}
	return 0;
 8000536:	2300      	movs	r3, #0
}
 8000538:	4618      	mov	r0, r3
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}

08000540 <myCreateActuator>:

int8_t myCreateActuator(MyActuator* _myActuator, MyCan* myCan, uint32_t canID, uint16_t maxspeed){
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	60f8      	str	r0, [r7, #12]
 8000548:	60b9      	str	r1, [r7, #8]
 800054a:	607a      	str	r2, [r7, #4]
 800054c:	807b      	strh	r3, [r7, #2]
	_myActuator->canID = canID;
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	687a      	ldr	r2, [r7, #4]
 8000552:	601a      	str	r2, [r3, #0]
	_myActuator->maxSpeed = maxspeed;
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	887a      	ldrh	r2, [r7, #2]
 8000558:	809a      	strh	r2, [r3, #4]
	_myActuator->myCan = myCan;
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	68ba      	ldr	r2, [r7, #8]
 800055e:	609a      	str	r2, [r3, #8]
	return 0;
 8000560:	2300      	movs	r3, #0
}
 8000562:	4618      	mov	r0, r3
 8000564:	3714      	adds	r7, #20
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
	...

08000570 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000574:	4b17      	ldr	r3, [pc, #92]	@ (80005d4 <MX_CAN1_Init+0x64>)
 8000576:	4a18      	ldr	r2, [pc, #96]	@ (80005d8 <MX_CAN1_Init+0x68>)
 8000578:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 800057a:	4b16      	ldr	r3, [pc, #88]	@ (80005d4 <MX_CAN1_Init+0x64>)
 800057c:	2206      	movs	r2, #6
 800057e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000580:	4b14      	ldr	r3, [pc, #80]	@ (80005d4 <MX_CAN1_Init+0x64>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000586:	4b13      	ldr	r3, [pc, #76]	@ (80005d4 <MX_CAN1_Init+0x64>)
 8000588:	2200      	movs	r2, #0
 800058a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 800058c:	4b11      	ldr	r3, [pc, #68]	@ (80005d4 <MX_CAN1_Init+0x64>)
 800058e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000592:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000594:	4b0f      	ldr	r3, [pc, #60]	@ (80005d4 <MX_CAN1_Init+0x64>)
 8000596:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800059a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800059c:	4b0d      	ldr	r3, [pc, #52]	@ (80005d4 <MX_CAN1_Init+0x64>)
 800059e:	2200      	movs	r2, #0
 80005a0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005a2:	4b0c      	ldr	r3, [pc, #48]	@ (80005d4 <MX_CAN1_Init+0x64>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005a8:	4b0a      	ldr	r3, [pc, #40]	@ (80005d4 <MX_CAN1_Init+0x64>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005ae:	4b09      	ldr	r3, [pc, #36]	@ (80005d4 <MX_CAN1_Init+0x64>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005b4:	4b07      	ldr	r3, [pc, #28]	@ (80005d4 <MX_CAN1_Init+0x64>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005ba:	4b06      	ldr	r3, [pc, #24]	@ (80005d4 <MX_CAN1_Init+0x64>)
 80005bc:	2200      	movs	r2, #0
 80005be:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005c0:	4804      	ldr	r0, [pc, #16]	@ (80005d4 <MX_CAN1_Init+0x64>)
 80005c2:	f000 fab7 	bl	8000b34 <HAL_CAN_Init>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005cc:	f000 f922 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80005d0:	bf00      	nop
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	2000002c 	.word	0x2000002c
 80005d8:	40006400 	.word	0x40006400

080005dc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	@ 0x28
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a19      	ldr	r2, [pc, #100]	@ (8000660 <HAL_CAN_MspInit+0x84>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d12c      	bne.n	8000658 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	613b      	str	r3, [r7, #16]
 8000602:	4b18      	ldr	r3, [pc, #96]	@ (8000664 <HAL_CAN_MspInit+0x88>)
 8000604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000606:	4a17      	ldr	r2, [pc, #92]	@ (8000664 <HAL_CAN_MspInit+0x88>)
 8000608:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800060c:	6413      	str	r3, [r2, #64]	@ 0x40
 800060e:	4b15      	ldr	r3, [pc, #84]	@ (8000664 <HAL_CAN_MspInit+0x88>)
 8000610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	4b11      	ldr	r3, [pc, #68]	@ (8000664 <HAL_CAN_MspInit+0x88>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	4a10      	ldr	r2, [pc, #64]	@ (8000664 <HAL_CAN_MspInit+0x88>)
 8000624:	f043 0302 	orr.w	r3, r3, #2
 8000628:	6313      	str	r3, [r2, #48]	@ 0x30
 800062a:	4b0e      	ldr	r3, [pc, #56]	@ (8000664 <HAL_CAN_MspInit+0x88>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	f003 0302 	and.w	r3, r3, #2
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000636:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800063a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063c:	2302      	movs	r3, #2
 800063e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000644:	2303      	movs	r3, #3
 8000646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000648:	2309      	movs	r3, #9
 800064a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	4619      	mov	r1, r3
 8000652:	4805      	ldr	r0, [pc, #20]	@ (8000668 <HAL_CAN_MspInit+0x8c>)
 8000654:	f000 fe32 	bl	80012bc <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000658:	bf00      	nop
 800065a:	3728      	adds	r7, #40	@ 0x28
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40006400 	.word	0x40006400
 8000664:	40023800 	.word	0x40023800
 8000668:	40020400 	.word	0x40020400

0800066c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	60fb      	str	r3, [r7, #12]
 8000676:	4b1e      	ldr	r3, [pc, #120]	@ (80006f0 <MX_GPIO_Init+0x84>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	4a1d      	ldr	r2, [pc, #116]	@ (80006f0 <MX_GPIO_Init+0x84>)
 800067c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000680:	6313      	str	r3, [r2, #48]	@ 0x30
 8000682:	4b1b      	ldr	r3, [pc, #108]	@ (80006f0 <MX_GPIO_Init+0x84>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	2300      	movs	r3, #0
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	4b17      	ldr	r3, [pc, #92]	@ (80006f0 <MX_GPIO_Init+0x84>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000696:	4a16      	ldr	r2, [pc, #88]	@ (80006f0 <MX_GPIO_Init+0x84>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	6313      	str	r3, [r2, #48]	@ 0x30
 800069e:	4b14      	ldr	r3, [pc, #80]	@ (80006f0 <MX_GPIO_Init+0x84>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	f003 0301 	and.w	r3, r3, #1
 80006a6:	60bb      	str	r3, [r7, #8]
 80006a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	4b10      	ldr	r3, [pc, #64]	@ (80006f0 <MX_GPIO_Init+0x84>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	4a0f      	ldr	r2, [pc, #60]	@ (80006f0 <MX_GPIO_Init+0x84>)
 80006b4:	f043 0304 	orr.w	r3, r3, #4
 80006b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ba:	4b0d      	ldr	r3, [pc, #52]	@ (80006f0 <MX_GPIO_Init+0x84>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	f003 0304 	and.w	r3, r3, #4
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	603b      	str	r3, [r7, #0]
 80006ca:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <MX_GPIO_Init+0x84>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	4a08      	ldr	r2, [pc, #32]	@ (80006f0 <MX_GPIO_Init+0x84>)
 80006d0:	f043 0302 	orr.w	r3, r3, #2
 80006d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d6:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <MX_GPIO_Init+0x84>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	f003 0302 	and.w	r3, r3, #2
 80006de:	603b      	str	r3, [r7, #0]
 80006e0:	683b      	ldr	r3, [r7, #0]

}
 80006e2:	bf00      	nop
 80006e4:	3714      	adds	r7, #20
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	40023800 	.word	0x40023800

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f8:	f000 f9aa 	bl	8000a50 <HAL_Init>

  /* USER CODE BEGIN Init */
  myInitCanbus(&can1);
 80006fc:	480e      	ldr	r0, [pc, #56]	@ (8000738 <main+0x44>)
 80006fe:	f7ff fedb 	bl	80004b8 <myInitCanbus>
  myCreateActuator(&act1, &can1, 0x141, 500);
 8000702:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000706:	f240 1241 	movw	r2, #321	@ 0x141
 800070a:	490b      	ldr	r1, [pc, #44]	@ (8000738 <main+0x44>)
 800070c:	480b      	ldr	r0, [pc, #44]	@ (800073c <main+0x48>)
 800070e:	f7ff ff17 	bl	8000540 <myCreateActuator>
  myCreateActuator(&act1, &can1, 0x142, 500);
 8000712:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000716:	f44f 72a1 	mov.w	r2, #322	@ 0x142
 800071a:	4907      	ldr	r1, [pc, #28]	@ (8000738 <main+0x44>)
 800071c:	4807      	ldr	r0, [pc, #28]	@ (800073c <main+0x48>)
 800071e:	f7ff ff0f 	bl	8000540 <myCreateActuator>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000722:	f000 f80d 	bl	8000740 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000726:	f7ff ffa1 	bl	800066c <MX_GPIO_Init>
  MX_CAN1_Init();
 800072a:	f7ff ff21 	bl	8000570 <MX_CAN1_Init>
  MX_UART4_Init();
 800072e:	f000 f8eb 	bl	8000908 <MX_UART4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000732:	bf00      	nop
 8000734:	e7fd      	b.n	8000732 <main+0x3e>
 8000736:	bf00      	nop
 8000738:	20000054 	.word	0x20000054
 800073c:	200000d0 	.word	0x200000d0

08000740 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b094      	sub	sp, #80	@ 0x50
 8000744:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000746:	f107 0320 	add.w	r3, r7, #32
 800074a:	2230      	movs	r2, #48	@ 0x30
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f002 fafc 	bl	8002d4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000754:	f107 030c 	add.w	r3, r7, #12
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000764:	2300      	movs	r3, #0
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	4b28      	ldr	r3, [pc, #160]	@ (800080c <SystemClock_Config+0xcc>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076c:	4a27      	ldr	r2, [pc, #156]	@ (800080c <SystemClock_Config+0xcc>)
 800076e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000772:	6413      	str	r3, [r2, #64]	@ 0x40
 8000774:	4b25      	ldr	r3, [pc, #148]	@ (800080c <SystemClock_Config+0xcc>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000778:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000780:	2300      	movs	r3, #0
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	4b22      	ldr	r3, [pc, #136]	@ (8000810 <SystemClock_Config+0xd0>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a21      	ldr	r2, [pc, #132]	@ (8000810 <SystemClock_Config+0xd0>)
 800078a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800078e:	6013      	str	r3, [r2, #0]
 8000790:	4b1f      	ldr	r3, [pc, #124]	@ (8000810 <SystemClock_Config+0xd0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800079c:	2301      	movs	r3, #1
 800079e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a6:	2302      	movs	r3, #2
 80007a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007b0:	2308      	movs	r3, #8
 80007b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80007b4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80007b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ba:	2302      	movs	r3, #2
 80007bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80007be:	2307      	movs	r3, #7
 80007c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c2:	f107 0320 	add.w	r3, r7, #32
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 ff14 	bl	80015f4 <HAL_RCC_OscConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007d2:	f000 f81f 	bl	8000814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d6:	230f      	movs	r3, #15
 80007d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007da:	2302      	movs	r3, #2
 80007dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007e2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	2105      	movs	r1, #5
 80007f4:	4618      	mov	r0, r3
 80007f6:	f001 f975 	bl	8001ae4 <HAL_RCC_ClockConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000800:	f000 f808 	bl	8000814 <Error_Handler>
  }
}
 8000804:	bf00      	nop
 8000806:	3750      	adds	r7, #80	@ 0x50
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40023800 	.word	0x40023800
 8000810:	40007000 	.word	0x40007000

08000814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000818:	b672      	cpsid	i
}
 800081a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <Error_Handler+0x8>

08000820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b10      	ldr	r3, [pc, #64]	@ (800086c <HAL_MspInit+0x4c>)
 800082c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800082e:	4a0f      	ldr	r2, [pc, #60]	@ (800086c <HAL_MspInit+0x4c>)
 8000830:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000834:	6453      	str	r3, [r2, #68]	@ 0x44
 8000836:	4b0d      	ldr	r3, [pc, #52]	@ (800086c <HAL_MspInit+0x4c>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800083a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	603b      	str	r3, [r7, #0]
 8000846:	4b09      	ldr	r3, [pc, #36]	@ (800086c <HAL_MspInit+0x4c>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084a:	4a08      	ldr	r2, [pc, #32]	@ (800086c <HAL_MspInit+0x4c>)
 800084c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000850:	6413      	str	r3, [r2, #64]	@ 0x40
 8000852:	4b06      	ldr	r3, [pc, #24]	@ (800086c <HAL_MspInit+0x4c>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800085e:	2007      	movs	r0, #7
 8000860:	f000 fc58 	bl	8001114 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000864:	bf00      	nop
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40023800 	.word	0x40023800

08000870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000874:	bf00      	nop
 8000876:	e7fd      	b.n	8000874 <NMI_Handler+0x4>

08000878 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <HardFault_Handler+0x4>

08000880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000884:	bf00      	nop
 8000886:	e7fd      	b.n	8000884 <MemManage_Handler+0x4>

08000888 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <BusFault_Handler+0x4>

08000890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <UsageFault_Handler+0x4>

08000898 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a4:	4770      	bx	lr

080008a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c2:	b580      	push	{r7, lr}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c6:	f000 f915 	bl	8000af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80008d4:	4802      	ldr	r0, [pc, #8]	@ (80008e0 <UART4_IRQHandler+0x10>)
 80008d6:	f001 fb73 	bl	8001fc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000118 	.word	0x20000118

080008e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008e8:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <SystemInit+0x20>)
 80008ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008ee:	4a05      	ldr	r2, [pc, #20]	@ (8000904 <SystemInit+0x20>)
 80008f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800090c:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <MX_UART4_Init+0x4c>)
 800090e:	4a12      	ldr	r2, [pc, #72]	@ (8000958 <MX_UART4_Init+0x50>)
 8000910:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000912:	4b10      	ldr	r3, [pc, #64]	@ (8000954 <MX_UART4_Init+0x4c>)
 8000914:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000918:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800091a:	4b0e      	ldr	r3, [pc, #56]	@ (8000954 <MX_UART4_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000920:	4b0c      	ldr	r3, [pc, #48]	@ (8000954 <MX_UART4_Init+0x4c>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000926:	4b0b      	ldr	r3, [pc, #44]	@ (8000954 <MX_UART4_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800092c:	4b09      	ldr	r3, [pc, #36]	@ (8000954 <MX_UART4_Init+0x4c>)
 800092e:	220c      	movs	r2, #12
 8000930:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000932:	4b08      	ldr	r3, [pc, #32]	@ (8000954 <MX_UART4_Init+0x4c>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000938:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <MX_UART4_Init+0x4c>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800093e:	4805      	ldr	r0, [pc, #20]	@ (8000954 <MX_UART4_Init+0x4c>)
 8000940:	f001 faf0 	bl	8001f24 <HAL_UART_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800094a:	f7ff ff63 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000118 	.word	0x20000118
 8000958:	40004c00 	.word	0x40004c00

0800095c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	@ 0x28
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a1d      	ldr	r2, [pc, #116]	@ (80009f0 <HAL_UART_MspInit+0x94>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d134      	bne.n	80009e8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	4b1c      	ldr	r3, [pc, #112]	@ (80009f4 <HAL_UART_MspInit+0x98>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000986:	4a1b      	ldr	r2, [pc, #108]	@ (80009f4 <HAL_UART_MspInit+0x98>)
 8000988:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800098c:	6413      	str	r3, [r2, #64]	@ 0x40
 800098e:	4b19      	ldr	r3, [pc, #100]	@ (80009f4 <HAL_UART_MspInit+0x98>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000992:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000996:	613b      	str	r3, [r7, #16]
 8000998:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	4b15      	ldr	r3, [pc, #84]	@ (80009f4 <HAL_UART_MspInit+0x98>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	4a14      	ldr	r2, [pc, #80]	@ (80009f4 <HAL_UART_MspInit+0x98>)
 80009a4:	f043 0304 	orr.w	r3, r3, #4
 80009a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009aa:	4b12      	ldr	r3, [pc, #72]	@ (80009f4 <HAL_UART_MspInit+0x98>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	f003 0304 	and.w	r3, r3, #4
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80009b6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80009ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c4:	2303      	movs	r3, #3
 80009c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80009c8:	2308      	movs	r3, #8
 80009ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4619      	mov	r1, r3
 80009d2:	4809      	ldr	r0, [pc, #36]	@ (80009f8 <HAL_UART_MspInit+0x9c>)
 80009d4:	f000 fc72 	bl	80012bc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80009d8:	2200      	movs	r2, #0
 80009da:	2100      	movs	r1, #0
 80009dc:	2034      	movs	r0, #52	@ 0x34
 80009de:	f000 fba4 	bl	800112a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80009e2:	2034      	movs	r0, #52	@ 0x34
 80009e4:	f000 fbbd 	bl	8001162 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 80009e8:	bf00      	nop
 80009ea:	3728      	adds	r7, #40	@ 0x28
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40004c00 	.word	0x40004c00
 80009f4:	40023800 	.word	0x40023800
 80009f8:	40020800 	.word	0x40020800

080009fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a00:	480d      	ldr	r0, [pc, #52]	@ (8000a38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a02:	490e      	ldr	r1, [pc, #56]	@ (8000a3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a04:	4a0e      	ldr	r2, [pc, #56]	@ (8000a40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a08:	e002      	b.n	8000a10 <LoopCopyDataInit>

08000a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0e:	3304      	adds	r3, #4

08000a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a14:	d3f9      	bcc.n	8000a0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a16:	4a0b      	ldr	r2, [pc, #44]	@ (8000a44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a18:	4c0b      	ldr	r4, [pc, #44]	@ (8000a48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a1c:	e001      	b.n	8000a22 <LoopFillZerobss>

08000a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a20:	3204      	adds	r2, #4

08000a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a24:	d3fb      	bcc.n	8000a1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a26:	f7ff ff5d 	bl	80008e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a2a:	f002 f997 	bl	8002d5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a2e:	f7ff fe61 	bl	80006f4 <main>
  bx  lr    
 8000a32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a3c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a40:	08002de4 	.word	0x08002de4
  ldr r2, =_sbss
 8000a44:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a48:	20000160 	.word	0x20000160

08000a4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a4c:	e7fe      	b.n	8000a4c <ADC_IRQHandler>
	...

08000a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a54:	4b0e      	ldr	r3, [pc, #56]	@ (8000a90 <HAL_Init+0x40>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0d      	ldr	r2, [pc, #52]	@ (8000a90 <HAL_Init+0x40>)
 8000a5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a60:	4b0b      	ldr	r3, [pc, #44]	@ (8000a90 <HAL_Init+0x40>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a0a      	ldr	r2, [pc, #40]	@ (8000a90 <HAL_Init+0x40>)
 8000a66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a6c:	4b08      	ldr	r3, [pc, #32]	@ (8000a90 <HAL_Init+0x40>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a07      	ldr	r2, [pc, #28]	@ (8000a90 <HAL_Init+0x40>)
 8000a72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a78:	2003      	movs	r0, #3
 8000a7a:	f000 fb4b 	bl	8001114 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f000 f808 	bl	8000a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a84:	f7ff fecc 	bl	8000820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023c00 	.word	0x40023c00

08000a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ae8 <HAL_InitTick+0x54>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	4b12      	ldr	r3, [pc, #72]	@ (8000aec <HAL_InitTick+0x58>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 fb63 	bl	800117e <HAL_SYSTICK_Config>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e00e      	b.n	8000ae0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b0f      	cmp	r3, #15
 8000ac6:	d80a      	bhi.n	8000ade <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad0:	f000 fb2b 	bl	800112a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad4:	4a06      	ldr	r2, [pc, #24]	@ (8000af0 <HAL_InitTick+0x5c>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ada:	2300      	movs	r3, #0
 8000adc:	e000      	b.n	8000ae0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	20000008 	.word	0x20000008
 8000af0:	20000004 	.word	0x20000004

08000af4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af8:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <HAL_IncTick+0x20>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	461a      	mov	r2, r3
 8000afe:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <HAL_IncTick+0x24>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4413      	add	r3, r2
 8000b04:	4a04      	ldr	r2, [pc, #16]	@ (8000b18 <HAL_IncTick+0x24>)
 8000b06:	6013      	str	r3, [r2, #0]
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	20000008 	.word	0x20000008
 8000b18:	2000015c 	.word	0x2000015c

08000b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b20:	4b03      	ldr	r3, [pc, #12]	@ (8000b30 <HAL_GetTick+0x14>)
 8000b22:	681b      	ldr	r3, [r3, #0]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	2000015c 	.word	0x2000015c

08000b34 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d101      	bne.n	8000b46 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	e0ed      	b.n	8000d22 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d102      	bne.n	8000b58 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f7ff fd42 	bl	80005dc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f042 0201 	orr.w	r2, r2, #1
 8000b66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b68:	f7ff ffd8 	bl	8000b1c <HAL_GetTick>
 8000b6c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b6e:	e012      	b.n	8000b96 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b70:	f7ff ffd4 	bl	8000b1c <HAL_GetTick>
 8000b74:	4602      	mov	r2, r0
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	2b0a      	cmp	r3, #10
 8000b7c:	d90b      	bls.n	8000b96 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b82:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	2205      	movs	r2, #5
 8000b8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e0c5      	b.n	8000d22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f003 0301 	and.w	r3, r3, #1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d0e5      	beq.n	8000b70 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f022 0202 	bic.w	r2, r2, #2
 8000bb2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bb4:	f7ff ffb2 	bl	8000b1c <HAL_GetTick>
 8000bb8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000bba:	e012      	b.n	8000be2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000bbc:	f7ff ffae 	bl	8000b1c <HAL_GetTick>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	2b0a      	cmp	r3, #10
 8000bc8:	d90b      	bls.n	8000be2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000bce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	2205      	movs	r2, #5
 8000bda:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e09f      	b.n	8000d22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f003 0302 	and.w	r3, r3, #2
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1e5      	bne.n	8000bbc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	7e1b      	ldrb	r3, [r3, #24]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d108      	bne.n	8000c0a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	681a      	ldr	r2, [r3, #0]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	e007      	b.n	8000c1a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000c18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	7e5b      	ldrb	r3, [r3, #25]
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d108      	bne.n	8000c34 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	e007      	b.n	8000c44 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000c42:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	7e9b      	ldrb	r3, [r3, #26]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d108      	bne.n	8000c5e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f042 0220 	orr.w	r2, r2, #32
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	e007      	b.n	8000c6e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f022 0220 	bic.w	r2, r2, #32
 8000c6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	7edb      	ldrb	r3, [r3, #27]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d108      	bne.n	8000c88 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f022 0210 	bic.w	r2, r2, #16
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	e007      	b.n	8000c98 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f042 0210 	orr.w	r2, r2, #16
 8000c96:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	7f1b      	ldrb	r3, [r3, #28]
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d108      	bne.n	8000cb2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f042 0208 	orr.w	r2, r2, #8
 8000cae:	601a      	str	r2, [r3, #0]
 8000cb0:	e007      	b.n	8000cc2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f022 0208 	bic.w	r2, r2, #8
 8000cc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	7f5b      	ldrb	r3, [r3, #29]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d108      	bne.n	8000cdc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f042 0204 	orr.w	r2, r2, #4
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	e007      	b.n	8000cec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f022 0204 	bic.w	r2, r2, #4
 8000cea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	689a      	ldr	r2, [r3, #8]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	691b      	ldr	r3, [r3, #16]
 8000cfa:	431a      	orrs	r2, r3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	695b      	ldr	r3, [r3, #20]
 8000d00:	ea42 0103 	orr.w	r1, r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	1e5a      	subs	r2, r3, #1
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2200      	movs	r2, #0
 8000d16:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b087      	sub	sp, #28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d42:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000d44:	7cfb      	ldrb	r3, [r7, #19]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d003      	beq.n	8000d52 <HAL_CAN_ConfigFilter+0x26>
 8000d4a:	7cfb      	ldrb	r3, [r7, #19]
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	f040 80be 	bne.w	8000ece <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000d52:	4b65      	ldr	r3, [pc, #404]	@ (8000ee8 <HAL_CAN_ConfigFilter+0x1bc>)
 8000d54:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000d5c:	f043 0201 	orr.w	r2, r3, #1
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000d6c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d80:	021b      	lsls	r3, r3, #8
 8000d82:	431a      	orrs	r2, r3
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	f003 031f 	and.w	r3, r3, #31
 8000d92:	2201      	movs	r2, #1
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	43db      	mvns	r3, r3
 8000da4:	401a      	ands	r2, r3
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	69db      	ldr	r3, [r3, #28]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d123      	bne.n	8000dfc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dd2:	683a      	ldr	r2, [r7, #0]
 8000dd4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000dd6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	3248      	adds	r2, #72	@ 0x48
 8000ddc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000df0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000df2:	6979      	ldr	r1, [r7, #20]
 8000df4:	3348      	adds	r3, #72	@ 0x48
 8000df6:	00db      	lsls	r3, r3, #3
 8000df8:	440b      	add	r3, r1
 8000dfa:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	69db      	ldr	r3, [r3, #28]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d122      	bne.n	8000e4a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	431a      	orrs	r2, r3
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e20:	683a      	ldr	r2, [r7, #0]
 8000e22:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000e24:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	3248      	adds	r2, #72	@ 0x48
 8000e2a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e3e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e40:	6979      	ldr	r1, [r7, #20]
 8000e42:	3348      	adds	r3, #72	@ 0x48
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	440b      	add	r3, r1
 8000e48:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d109      	bne.n	8000e66 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	401a      	ands	r2, r3
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000e64:	e007      	b.n	8000e76 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	431a      	orrs	r2, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	691b      	ldr	r3, [r3, #16]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d109      	bne.n	8000e92 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	43db      	mvns	r3, r3
 8000e88:	401a      	ands	r2, r3
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000e90:	e007      	b.n	8000ea2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	6a1b      	ldr	r3, [r3, #32]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d107      	bne.n	8000eba <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	431a      	orrs	r2, r3
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000ec0:	f023 0201 	bic.w	r2, r3, #1
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	e006      	b.n	8000edc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ed2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
  }
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	371c      	adds	r7, #28
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	40006400 	.word	0x40006400

08000eec <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d12e      	bne.n	8000f5e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2202      	movs	r2, #2
 8000f04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f022 0201 	bic.w	r2, r2, #1
 8000f16:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000f18:	f7ff fe00 	bl	8000b1c <HAL_GetTick>
 8000f1c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f1e:	e012      	b.n	8000f46 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f20:	f7ff fdfc 	bl	8000b1c <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b0a      	cmp	r3, #10
 8000f2c:	d90b      	bls.n	8000f46 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f32:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2205      	movs	r2, #5
 8000f3e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e012      	b.n	8000f6c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d1e5      	bne.n	8000f20 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e006      	b.n	8000f6c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f62:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
  }
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f84:	4b0c      	ldr	r3, [pc, #48]	@ (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f90:	4013      	ands	r3, r2
 8000f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa6:	4a04      	ldr	r2, [pc, #16]	@ (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	60d3      	str	r3, [r2, #12]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc0:	4b04      	ldr	r3, [pc, #16]	@ (8000fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	f003 0307 	and.w	r3, r3, #7
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	db0b      	blt.n	8001002 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	f003 021f 	and.w	r2, r3, #31
 8000ff0:	4907      	ldr	r1, [pc, #28]	@ (8001010 <__NVIC_EnableIRQ+0x38>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	095b      	lsrs	r3, r3, #5
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000e100 	.word	0xe000e100

08001014 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	6039      	str	r1, [r7, #0]
 800101e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	2b00      	cmp	r3, #0
 8001026:	db0a      	blt.n	800103e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	b2da      	uxtb	r2, r3
 800102c:	490c      	ldr	r1, [pc, #48]	@ (8001060 <__NVIC_SetPriority+0x4c>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	0112      	lsls	r2, r2, #4
 8001034:	b2d2      	uxtb	r2, r2
 8001036:	440b      	add	r3, r1
 8001038:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800103c:	e00a      	b.n	8001054 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4908      	ldr	r1, [pc, #32]	@ (8001064 <__NVIC_SetPriority+0x50>)
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	f003 030f 	and.w	r3, r3, #15
 800104a:	3b04      	subs	r3, #4
 800104c:	0112      	lsls	r2, r2, #4
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	440b      	add	r3, r1
 8001052:	761a      	strb	r2, [r3, #24]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000e100 	.word	0xe000e100
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	@ 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	f1c3 0307 	rsb	r3, r3, #7
 8001082:	2b04      	cmp	r3, #4
 8001084:	bf28      	it	cs
 8001086:	2304      	movcs	r3, #4
 8001088:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3304      	adds	r3, #4
 800108e:	2b06      	cmp	r3, #6
 8001090:	d902      	bls.n	8001098 <NVIC_EncodePriority+0x30>
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3b03      	subs	r3, #3
 8001096:	e000      	b.n	800109a <NVIC_EncodePriority+0x32>
 8001098:	2300      	movs	r3, #0
 800109a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	f04f 32ff 	mov.w	r2, #4294967295
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43da      	mvns	r2, r3
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	401a      	ands	r2, r3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b0:	f04f 31ff 	mov.w	r1, #4294967295
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fa01 f303 	lsl.w	r3, r1, r3
 80010ba:	43d9      	mvns	r1, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c0:	4313      	orrs	r3, r2
         );
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3724      	adds	r7, #36	@ 0x24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3b01      	subs	r3, #1
 80010dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010e0:	d301      	bcc.n	80010e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e2:	2301      	movs	r3, #1
 80010e4:	e00f      	b.n	8001106 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001110 <SysTick_Config+0x40>)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	3b01      	subs	r3, #1
 80010ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ee:	210f      	movs	r1, #15
 80010f0:	f04f 30ff 	mov.w	r0, #4294967295
 80010f4:	f7ff ff8e 	bl	8001014 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f8:	4b05      	ldr	r3, [pc, #20]	@ (8001110 <SysTick_Config+0x40>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fe:	4b04      	ldr	r3, [pc, #16]	@ (8001110 <SysTick_Config+0x40>)
 8001100:	2207      	movs	r2, #7
 8001102:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	e000e010 	.word	0xe000e010

08001114 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff ff29 	bl	8000f74 <__NVIC_SetPriorityGrouping>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800112a:	b580      	push	{r7, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	60b9      	str	r1, [r7, #8]
 8001134:	607a      	str	r2, [r7, #4]
 8001136:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800113c:	f7ff ff3e 	bl	8000fbc <__NVIC_GetPriorityGrouping>
 8001140:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	68b9      	ldr	r1, [r7, #8]
 8001146:	6978      	ldr	r0, [r7, #20]
 8001148:	f7ff ff8e 	bl	8001068 <NVIC_EncodePriority>
 800114c:	4602      	mov	r2, r0
 800114e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff5d 	bl	8001014 <__NVIC_SetPriority>
}
 800115a:	bf00      	nop
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	4603      	mov	r3, r0
 800116a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff ff31 	bl	8000fd8 <__NVIC_EnableIRQ>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}

0800117e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ffa2 	bl	80010d0 <SysTick_Config>
 800118c:	4603      	mov	r3, r0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b084      	sub	sp, #16
 800119a:	af00      	add	r7, sp, #0
 800119c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011a2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80011a4:	f7ff fcba 	bl	8000b1c <HAL_GetTick>
 80011a8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d008      	beq.n	80011c8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2280      	movs	r2, #128	@ 0x80
 80011ba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e052      	b.n	800126e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f022 0216 	bic.w	r2, r2, #22
 80011d6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	695a      	ldr	r2, [r3, #20]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80011e6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d103      	bne.n	80011f8 <HAL_DMA_Abort+0x62>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d007      	beq.n	8001208 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f022 0208 	bic.w	r2, r2, #8
 8001206:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f022 0201 	bic.w	r2, r2, #1
 8001216:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001218:	e013      	b.n	8001242 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800121a:	f7ff fc7f 	bl	8000b1c <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b05      	cmp	r3, #5
 8001226:	d90c      	bls.n	8001242 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2220      	movs	r2, #32
 800122c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2203      	movs	r2, #3
 8001232:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e015      	b.n	800126e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1e4      	bne.n	800121a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001254:	223f      	movs	r2, #63	@ 0x3f
 8001256:	409a      	lsls	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2201      	movs	r2, #1
 8001260:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001276:	b480      	push	{r7}
 8001278:	b083      	sub	sp, #12
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d004      	beq.n	8001294 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2280      	movs	r2, #128	@ 0x80
 800128e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e00c      	b.n	80012ae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2205      	movs	r2, #5
 8001298:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 0201 	bic.w	r2, r2, #1
 80012aa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012bc:	b480      	push	{r7}
 80012be:	b089      	sub	sp, #36	@ 0x24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
 80012d6:	e16b      	b.n	80015b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012d8:	2201      	movs	r2, #1
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	4013      	ands	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	f040 815a 	bne.w	80015aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d005      	beq.n	800130e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800130a:	2b02      	cmp	r3, #2
 800130c:	d130      	bne.n	8001370 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	2203      	movs	r2, #3
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	68da      	ldr	r2, [r3, #12]
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001344:	2201      	movs	r2, #1
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	091b      	lsrs	r3, r3, #4
 800135a:	f003 0201 	and.w	r2, r3, #1
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	2b03      	cmp	r3, #3
 800137a:	d017      	beq.n	80013ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	2203      	movs	r2, #3
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d123      	bne.n	8001400 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	08da      	lsrs	r2, r3, #3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3208      	adds	r2, #8
 80013c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	220f      	movs	r2, #15
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	691a      	ldr	r2, [r3, #16]
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	08da      	lsrs	r2, r3, #3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3208      	adds	r2, #8
 80013fa:	69b9      	ldr	r1, [r7, #24]
 80013fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	2203      	movs	r2, #3
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0203 	and.w	r2, r3, #3
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 80b4 	beq.w	80015aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	4b60      	ldr	r3, [pc, #384]	@ (80015c8 <HAL_GPIO_Init+0x30c>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144a:	4a5f      	ldr	r2, [pc, #380]	@ (80015c8 <HAL_GPIO_Init+0x30c>)
 800144c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001450:	6453      	str	r3, [r2, #68]	@ 0x44
 8001452:	4b5d      	ldr	r3, [pc, #372]	@ (80015c8 <HAL_GPIO_Init+0x30c>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001456:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800145e:	4a5b      	ldr	r2, [pc, #364]	@ (80015cc <HAL_GPIO_Init+0x310>)
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	089b      	lsrs	r3, r3, #2
 8001464:	3302      	adds	r3, #2
 8001466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	220f      	movs	r2, #15
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a52      	ldr	r2, [pc, #328]	@ (80015d0 <HAL_GPIO_Init+0x314>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d02b      	beq.n	80014e2 <HAL_GPIO_Init+0x226>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a51      	ldr	r2, [pc, #324]	@ (80015d4 <HAL_GPIO_Init+0x318>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d025      	beq.n	80014de <HAL_GPIO_Init+0x222>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a50      	ldr	r2, [pc, #320]	@ (80015d8 <HAL_GPIO_Init+0x31c>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d01f      	beq.n	80014da <HAL_GPIO_Init+0x21e>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a4f      	ldr	r2, [pc, #316]	@ (80015dc <HAL_GPIO_Init+0x320>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d019      	beq.n	80014d6 <HAL_GPIO_Init+0x21a>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a4e      	ldr	r2, [pc, #312]	@ (80015e0 <HAL_GPIO_Init+0x324>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d013      	beq.n	80014d2 <HAL_GPIO_Init+0x216>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a4d      	ldr	r2, [pc, #308]	@ (80015e4 <HAL_GPIO_Init+0x328>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d00d      	beq.n	80014ce <HAL_GPIO_Init+0x212>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a4c      	ldr	r2, [pc, #304]	@ (80015e8 <HAL_GPIO_Init+0x32c>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d007      	beq.n	80014ca <HAL_GPIO_Init+0x20e>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a4b      	ldr	r2, [pc, #300]	@ (80015ec <HAL_GPIO_Init+0x330>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d101      	bne.n	80014c6 <HAL_GPIO_Init+0x20a>
 80014c2:	2307      	movs	r3, #7
 80014c4:	e00e      	b.n	80014e4 <HAL_GPIO_Init+0x228>
 80014c6:	2308      	movs	r3, #8
 80014c8:	e00c      	b.n	80014e4 <HAL_GPIO_Init+0x228>
 80014ca:	2306      	movs	r3, #6
 80014cc:	e00a      	b.n	80014e4 <HAL_GPIO_Init+0x228>
 80014ce:	2305      	movs	r3, #5
 80014d0:	e008      	b.n	80014e4 <HAL_GPIO_Init+0x228>
 80014d2:	2304      	movs	r3, #4
 80014d4:	e006      	b.n	80014e4 <HAL_GPIO_Init+0x228>
 80014d6:	2303      	movs	r3, #3
 80014d8:	e004      	b.n	80014e4 <HAL_GPIO_Init+0x228>
 80014da:	2302      	movs	r3, #2
 80014dc:	e002      	b.n	80014e4 <HAL_GPIO_Init+0x228>
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <HAL_GPIO_Init+0x228>
 80014e2:	2300      	movs	r3, #0
 80014e4:	69fa      	ldr	r2, [r7, #28]
 80014e6:	f002 0203 	and.w	r2, r2, #3
 80014ea:	0092      	lsls	r2, r2, #2
 80014ec:	4093      	lsls	r3, r2
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014f4:	4935      	ldr	r1, [pc, #212]	@ (80015cc <HAL_GPIO_Init+0x310>)
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	089b      	lsrs	r3, r3, #2
 80014fa:	3302      	adds	r3, #2
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001502:	4b3b      	ldr	r3, [pc, #236]	@ (80015f0 <HAL_GPIO_Init+0x334>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	43db      	mvns	r3, r3
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	4013      	ands	r3, r2
 8001510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	4313      	orrs	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001526:	4a32      	ldr	r2, [pc, #200]	@ (80015f0 <HAL_GPIO_Init+0x334>)
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800152c:	4b30      	ldr	r3, [pc, #192]	@ (80015f0 <HAL_GPIO_Init+0x334>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	43db      	mvns	r3, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001550:	4a27      	ldr	r2, [pc, #156]	@ (80015f0 <HAL_GPIO_Init+0x334>)
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001556:	4b26      	ldr	r3, [pc, #152]	@ (80015f0 <HAL_GPIO_Init+0x334>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800157a:	4a1d      	ldr	r2, [pc, #116]	@ (80015f0 <HAL_GPIO_Init+0x334>)
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001580:	4b1b      	ldr	r3, [pc, #108]	@ (80015f0 <HAL_GPIO_Init+0x334>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015a4:	4a12      	ldr	r2, [pc, #72]	@ (80015f0 <HAL_GPIO_Init+0x334>)
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3301      	adds	r3, #1
 80015ae:	61fb      	str	r3, [r7, #28]
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	2b0f      	cmp	r3, #15
 80015b4:	f67f ae90 	bls.w	80012d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015b8:	bf00      	nop
 80015ba:	bf00      	nop
 80015bc:	3724      	adds	r7, #36	@ 0x24
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40013800 	.word	0x40013800
 80015d0:	40020000 	.word	0x40020000
 80015d4:	40020400 	.word	0x40020400
 80015d8:	40020800 	.word	0x40020800
 80015dc:	40020c00 	.word	0x40020c00
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40021400 	.word	0x40021400
 80015e8:	40021800 	.word	0x40021800
 80015ec:	40021c00 	.word	0x40021c00
 80015f0:	40013c00 	.word	0x40013c00

080015f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e267      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	2b00      	cmp	r3, #0
 8001610:	d075      	beq.n	80016fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001612:	4b88      	ldr	r3, [pc, #544]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f003 030c 	and.w	r3, r3, #12
 800161a:	2b04      	cmp	r3, #4
 800161c:	d00c      	beq.n	8001638 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800161e:	4b85      	ldr	r3, [pc, #532]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001626:	2b08      	cmp	r3, #8
 8001628:	d112      	bne.n	8001650 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800162a:	4b82      	ldr	r3, [pc, #520]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001632:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001636:	d10b      	bne.n	8001650 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001638:	4b7e      	ldr	r3, [pc, #504]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001640:	2b00      	cmp	r3, #0
 8001642:	d05b      	beq.n	80016fc <HAL_RCC_OscConfig+0x108>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d157      	bne.n	80016fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e242      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001658:	d106      	bne.n	8001668 <HAL_RCC_OscConfig+0x74>
 800165a:	4b76      	ldr	r3, [pc, #472]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a75      	ldr	r2, [pc, #468]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 8001660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001664:	6013      	str	r3, [r2, #0]
 8001666:	e01d      	b.n	80016a4 <HAL_RCC_OscConfig+0xb0>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001670:	d10c      	bne.n	800168c <HAL_RCC_OscConfig+0x98>
 8001672:	4b70      	ldr	r3, [pc, #448]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a6f      	ldr	r2, [pc, #444]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 8001678:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800167c:	6013      	str	r3, [r2, #0]
 800167e:	4b6d      	ldr	r3, [pc, #436]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a6c      	ldr	r2, [pc, #432]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 8001684:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	e00b      	b.n	80016a4 <HAL_RCC_OscConfig+0xb0>
 800168c:	4b69      	ldr	r3, [pc, #420]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a68      	ldr	r2, [pc, #416]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 8001692:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	4b66      	ldr	r3, [pc, #408]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a65      	ldr	r2, [pc, #404]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 800169e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d013      	beq.n	80016d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ac:	f7ff fa36 	bl	8000b1c <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016b4:	f7ff fa32 	bl	8000b1c <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b64      	cmp	r3, #100	@ 0x64
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e207      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c6:	4b5b      	ldr	r3, [pc, #364]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d0f0      	beq.n	80016b4 <HAL_RCC_OscConfig+0xc0>
 80016d2:	e014      	b.n	80016fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d4:	f7ff fa22 	bl	8000b1c <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016dc:	f7ff fa1e 	bl	8000b1c <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b64      	cmp	r3, #100	@ 0x64
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e1f3      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ee:	4b51      	ldr	r3, [pc, #324]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d1f0      	bne.n	80016dc <HAL_RCC_OscConfig+0xe8>
 80016fa:	e000      	b.n	80016fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d063      	beq.n	80017d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800170a:	4b4a      	ldr	r3, [pc, #296]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f003 030c 	and.w	r3, r3, #12
 8001712:	2b00      	cmp	r3, #0
 8001714:	d00b      	beq.n	800172e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001716:	4b47      	ldr	r3, [pc, #284]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800171e:	2b08      	cmp	r3, #8
 8001720:	d11c      	bne.n	800175c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001722:	4b44      	ldr	r3, [pc, #272]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d116      	bne.n	800175c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800172e:	4b41      	ldr	r3, [pc, #260]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b00      	cmp	r3, #0
 8001738:	d005      	beq.n	8001746 <HAL_RCC_OscConfig+0x152>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d001      	beq.n	8001746 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e1c7      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001746:	4b3b      	ldr	r3, [pc, #236]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	4937      	ldr	r1, [pc, #220]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 8001756:	4313      	orrs	r3, r2
 8001758:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175a:	e03a      	b.n	80017d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d020      	beq.n	80017a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001764:	4b34      	ldr	r3, [pc, #208]	@ (8001838 <HAL_RCC_OscConfig+0x244>)
 8001766:	2201      	movs	r2, #1
 8001768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800176a:	f7ff f9d7 	bl	8000b1c <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001770:	e008      	b.n	8001784 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001772:	f7ff f9d3 	bl	8000b1c <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	2b02      	cmp	r3, #2
 800177e:	d901      	bls.n	8001784 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e1a8      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001784:	4b2b      	ldr	r3, [pc, #172]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0302 	and.w	r3, r3, #2
 800178c:	2b00      	cmp	r3, #0
 800178e:	d0f0      	beq.n	8001772 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001790:	4b28      	ldr	r3, [pc, #160]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	691b      	ldr	r3, [r3, #16]
 800179c:	00db      	lsls	r3, r3, #3
 800179e:	4925      	ldr	r1, [pc, #148]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	600b      	str	r3, [r1, #0]
 80017a4:	e015      	b.n	80017d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017a6:	4b24      	ldr	r3, [pc, #144]	@ (8001838 <HAL_RCC_OscConfig+0x244>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ac:	f7ff f9b6 	bl	8000b1c <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017b4:	f7ff f9b2 	bl	8000b1c <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e187      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1f0      	bne.n	80017b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d036      	beq.n	800184c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d016      	beq.n	8001814 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017e6:	4b15      	ldr	r3, [pc, #84]	@ (800183c <HAL_RCC_OscConfig+0x248>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ec:	f7ff f996 	bl	8000b1c <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017f4:	f7ff f992 	bl	8000b1c <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e167      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001806:	4b0b      	ldr	r3, [pc, #44]	@ (8001834 <HAL_RCC_OscConfig+0x240>)
 8001808:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800180a:	f003 0302 	and.w	r3, r3, #2
 800180e:	2b00      	cmp	r3, #0
 8001810:	d0f0      	beq.n	80017f4 <HAL_RCC_OscConfig+0x200>
 8001812:	e01b      	b.n	800184c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001814:	4b09      	ldr	r3, [pc, #36]	@ (800183c <HAL_RCC_OscConfig+0x248>)
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800181a:	f7ff f97f 	bl	8000b1c <HAL_GetTick>
 800181e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001820:	e00e      	b.n	8001840 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001822:	f7ff f97b 	bl	8000b1c <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	2b02      	cmp	r3, #2
 800182e:	d907      	bls.n	8001840 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e150      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
 8001834:	40023800 	.word	0x40023800
 8001838:	42470000 	.word	0x42470000
 800183c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001840:	4b88      	ldr	r3, [pc, #544]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001842:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001844:	f003 0302 	and.w	r3, r3, #2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1ea      	bne.n	8001822 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	2b00      	cmp	r3, #0
 8001856:	f000 8097 	beq.w	8001988 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800185a:	2300      	movs	r3, #0
 800185c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800185e:	4b81      	ldr	r3, [pc, #516]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d10f      	bne.n	800188a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	4b7d      	ldr	r3, [pc, #500]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	4a7c      	ldr	r2, [pc, #496]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001878:	6413      	str	r3, [r2, #64]	@ 0x40
 800187a:	4b7a      	ldr	r3, [pc, #488]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001886:	2301      	movs	r3, #1
 8001888:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188a:	4b77      	ldr	r3, [pc, #476]	@ (8001a68 <HAL_RCC_OscConfig+0x474>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001892:	2b00      	cmp	r3, #0
 8001894:	d118      	bne.n	80018c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001896:	4b74      	ldr	r3, [pc, #464]	@ (8001a68 <HAL_RCC_OscConfig+0x474>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a73      	ldr	r2, [pc, #460]	@ (8001a68 <HAL_RCC_OscConfig+0x474>)
 800189c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018a2:	f7ff f93b 	bl	8000b1c <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018aa:	f7ff f937 	bl	8000b1c <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e10c      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018bc:	4b6a      	ldr	r3, [pc, #424]	@ (8001a68 <HAL_RCC_OscConfig+0x474>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0f0      	beq.n	80018aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d106      	bne.n	80018de <HAL_RCC_OscConfig+0x2ea>
 80018d0:	4b64      	ldr	r3, [pc, #400]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 80018d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018d4:	4a63      	ldr	r2, [pc, #396]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	6713      	str	r3, [r2, #112]	@ 0x70
 80018dc:	e01c      	b.n	8001918 <HAL_RCC_OscConfig+0x324>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2b05      	cmp	r3, #5
 80018e4:	d10c      	bne.n	8001900 <HAL_RCC_OscConfig+0x30c>
 80018e6:	4b5f      	ldr	r3, [pc, #380]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 80018e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ea:	4a5e      	ldr	r2, [pc, #376]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 80018ec:	f043 0304 	orr.w	r3, r3, #4
 80018f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80018f2:	4b5c      	ldr	r3, [pc, #368]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 80018f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018f6:	4a5b      	ldr	r2, [pc, #364]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80018fe:	e00b      	b.n	8001918 <HAL_RCC_OscConfig+0x324>
 8001900:	4b58      	ldr	r3, [pc, #352]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001904:	4a57      	ldr	r2, [pc, #348]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001906:	f023 0301 	bic.w	r3, r3, #1
 800190a:	6713      	str	r3, [r2, #112]	@ 0x70
 800190c:	4b55      	ldr	r3, [pc, #340]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 800190e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001910:	4a54      	ldr	r2, [pc, #336]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001912:	f023 0304 	bic.w	r3, r3, #4
 8001916:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d015      	beq.n	800194c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001920:	f7ff f8fc 	bl	8000b1c <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001926:	e00a      	b.n	800193e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001928:	f7ff f8f8 	bl	8000b1c <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001936:	4293      	cmp	r3, r2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e0cb      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800193e:	4b49      	ldr	r3, [pc, #292]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d0ee      	beq.n	8001928 <HAL_RCC_OscConfig+0x334>
 800194a:	e014      	b.n	8001976 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194c:	f7ff f8e6 	bl	8000b1c <HAL_GetTick>
 8001950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001952:	e00a      	b.n	800196a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001954:	f7ff f8e2 	bl	8000b1c <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001962:	4293      	cmp	r3, r2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e0b5      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800196a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 800196c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1ee      	bne.n	8001954 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001976:	7dfb      	ldrb	r3, [r7, #23]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d105      	bne.n	8001988 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800197c:	4b39      	ldr	r3, [pc, #228]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 800197e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001980:	4a38      	ldr	r2, [pc, #224]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001982:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001986:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	2b00      	cmp	r3, #0
 800198e:	f000 80a1 	beq.w	8001ad4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001992:	4b34      	ldr	r3, [pc, #208]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 030c 	and.w	r3, r3, #12
 800199a:	2b08      	cmp	r3, #8
 800199c:	d05c      	beq.n	8001a58 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d141      	bne.n	8001a2a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a6:	4b31      	ldr	r3, [pc, #196]	@ (8001a6c <HAL_RCC_OscConfig+0x478>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ac:	f7ff f8b6 	bl	8000b1c <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b4:	f7ff f8b2 	bl	8000b1c <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e087      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c6:	4b27      	ldr	r3, [pc, #156]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f0      	bne.n	80019b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69da      	ldr	r2, [r3, #28]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e0:	019b      	lsls	r3, r3, #6
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e8:	085b      	lsrs	r3, r3, #1
 80019ea:	3b01      	subs	r3, #1
 80019ec:	041b      	lsls	r3, r3, #16
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f4:	061b      	lsls	r3, r3, #24
 80019f6:	491b      	ldr	r1, [pc, #108]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019fc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a6c <HAL_RCC_OscConfig+0x478>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a02:	f7ff f88b 	bl	8000b1c <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a0a:	f7ff f887 	bl	8000b1c <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e05c      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a1c:	4b11      	ldr	r3, [pc, #68]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0f0      	beq.n	8001a0a <HAL_RCC_OscConfig+0x416>
 8001a28:	e054      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a2a:	4b10      	ldr	r3, [pc, #64]	@ (8001a6c <HAL_RCC_OscConfig+0x478>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a30:	f7ff f874 	bl	8000b1c <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a38:	f7ff f870 	bl	8000b1c <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e045      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a4a:	4b06      	ldr	r3, [pc, #24]	@ (8001a64 <HAL_RCC_OscConfig+0x470>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0x444>
 8001a56:	e03d      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d107      	bne.n	8001a70 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e038      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
 8001a64:	40023800 	.word	0x40023800
 8001a68:	40007000 	.word	0x40007000
 8001a6c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a70:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae0 <HAL_RCC_OscConfig+0x4ec>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d028      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d121      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d11a      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001aa6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d111      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab6:	085b      	lsrs	r3, r3, #1
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d107      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001aca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d001      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e000      	b.n	8001ad6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023800 	.word	0x40023800

08001ae4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d101      	bne.n	8001af8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e0cc      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001af8:	4b68      	ldr	r3, [pc, #416]	@ (8001c9c <HAL_RCC_ClockConfig+0x1b8>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d90c      	bls.n	8001b20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b06:	4b65      	ldr	r3, [pc, #404]	@ (8001c9c <HAL_RCC_ClockConfig+0x1b8>)
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0e:	4b63      	ldr	r3, [pc, #396]	@ (8001c9c <HAL_RCC_ClockConfig+0x1b8>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d001      	beq.n	8001b20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e0b8      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d020      	beq.n	8001b6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d005      	beq.n	8001b44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b38:	4b59      	ldr	r3, [pc, #356]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	4a58      	ldr	r2, [pc, #352]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d005      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b50:	4b53      	ldr	r3, [pc, #332]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	4a52      	ldr	r2, [pc, #328]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b56:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b5c:	4b50      	ldr	r3, [pc, #320]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	494d      	ldr	r1, [pc, #308]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d044      	beq.n	8001c04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d107      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b82:	4b47      	ldr	r3, [pc, #284]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d119      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e07f      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d003      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	d107      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d109      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e06f      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e067      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bc2:	4b37      	ldr	r3, [pc, #220]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f023 0203 	bic.w	r2, r3, #3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	4934      	ldr	r1, [pc, #208]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bd4:	f7fe ffa2 	bl	8000b1c <HAL_GetTick>
 8001bd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bda:	e00a      	b.n	8001bf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bdc:	f7fe ff9e 	bl	8000b1c <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e04f      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf2:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f003 020c 	and.w	r2, r3, #12
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d1eb      	bne.n	8001bdc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c04:	4b25      	ldr	r3, [pc, #148]	@ (8001c9c <HAL_RCC_ClockConfig+0x1b8>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d20c      	bcs.n	8001c2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c12:	4b22      	ldr	r3, [pc, #136]	@ (8001c9c <HAL_RCC_ClockConfig+0x1b8>)
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	b2d2      	uxtb	r2, r2
 8001c18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1a:	4b20      	ldr	r3, [pc, #128]	@ (8001c9c <HAL_RCC_ClockConfig+0x1b8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d001      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e032      	b.n	8001c92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d008      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c38:	4b19      	ldr	r3, [pc, #100]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	4916      	ldr	r1, [pc, #88]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d009      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c56:	4b12      	ldr	r3, [pc, #72]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	00db      	lsls	r3, r3, #3
 8001c64:	490e      	ldr	r1, [pc, #56]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c6a:	f000 f821 	bl	8001cb0 <HAL_RCC_GetSysClockFreq>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	091b      	lsrs	r3, r3, #4
 8001c76:	f003 030f 	and.w	r3, r3, #15
 8001c7a:	490a      	ldr	r1, [pc, #40]	@ (8001ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c7c:	5ccb      	ldrb	r3, [r1, r3]
 8001c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c82:	4a09      	ldr	r2, [pc, #36]	@ (8001ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8001c84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c86:	4b09      	ldr	r3, [pc, #36]	@ (8001cac <HAL_RCC_ClockConfig+0x1c8>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe ff02 	bl	8000a94 <HAL_InitTick>

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40023c00 	.word	0x40023c00
 8001ca0:	40023800 	.word	0x40023800
 8001ca4:	08002dbc 	.word	0x08002dbc
 8001ca8:	20000000 	.word	0x20000000
 8001cac:	20000004 	.word	0x20000004

08001cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cb4:	b094      	sub	sp, #80	@ 0x50
 8001cb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	647b      	str	r3, [r7, #68]	@ 0x44
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cc8:	4b79      	ldr	r3, [pc, #484]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 030c 	and.w	r3, r3, #12
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d00d      	beq.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x40>
 8001cd4:	2b08      	cmp	r3, #8
 8001cd6:	f200 80e1 	bhi.w	8001e9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d002      	beq.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x34>
 8001cde:	2b04      	cmp	r3, #4
 8001ce0:	d003      	beq.n	8001cea <HAL_RCC_GetSysClockFreq+0x3a>
 8001ce2:	e0db      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ce4:	4b73      	ldr	r3, [pc, #460]	@ (8001eb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ce6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001ce8:	e0db      	b.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cea:	4b73      	ldr	r3, [pc, #460]	@ (8001eb8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001cec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cee:	e0d8      	b.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cf0:	4b6f      	ldr	r3, [pc, #444]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cf8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cfa:	4b6d      	ldr	r3, [pc, #436]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d063      	beq.n	8001dce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d06:	4b6a      	ldr	r3, [pc, #424]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	099b      	lsrs	r3, r3, #6
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d10:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d18:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001d22:	4622      	mov	r2, r4
 8001d24:	462b      	mov	r3, r5
 8001d26:	f04f 0000 	mov.w	r0, #0
 8001d2a:	f04f 0100 	mov.w	r1, #0
 8001d2e:	0159      	lsls	r1, r3, #5
 8001d30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d34:	0150      	lsls	r0, r2, #5
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4621      	mov	r1, r4
 8001d3c:	1a51      	subs	r1, r2, r1
 8001d3e:	6139      	str	r1, [r7, #16]
 8001d40:	4629      	mov	r1, r5
 8001d42:	eb63 0301 	sbc.w	r3, r3, r1
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	f04f 0200 	mov.w	r2, #0
 8001d4c:	f04f 0300 	mov.w	r3, #0
 8001d50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d54:	4659      	mov	r1, fp
 8001d56:	018b      	lsls	r3, r1, #6
 8001d58:	4651      	mov	r1, sl
 8001d5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d5e:	4651      	mov	r1, sl
 8001d60:	018a      	lsls	r2, r1, #6
 8001d62:	4651      	mov	r1, sl
 8001d64:	ebb2 0801 	subs.w	r8, r2, r1
 8001d68:	4659      	mov	r1, fp
 8001d6a:	eb63 0901 	sbc.w	r9, r3, r1
 8001d6e:	f04f 0200 	mov.w	r2, #0
 8001d72:	f04f 0300 	mov.w	r3, #0
 8001d76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d82:	4690      	mov	r8, r2
 8001d84:	4699      	mov	r9, r3
 8001d86:	4623      	mov	r3, r4
 8001d88:	eb18 0303 	adds.w	r3, r8, r3
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	462b      	mov	r3, r5
 8001d90:	eb49 0303 	adc.w	r3, r9, r3
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	f04f 0300 	mov.w	r3, #0
 8001d9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001da2:	4629      	mov	r1, r5
 8001da4:	024b      	lsls	r3, r1, #9
 8001da6:	4621      	mov	r1, r4
 8001da8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001dac:	4621      	mov	r1, r4
 8001dae:	024a      	lsls	r2, r1, #9
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001db6:	2200      	movs	r2, #0
 8001db8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001dba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001dbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001dc0:	f7fe fa02 	bl	80001c8 <__aeabi_uldivmod>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4613      	mov	r3, r2
 8001dca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001dcc:	e058      	b.n	8001e80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dce:	4b38      	ldr	r3, [pc, #224]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	099b      	lsrs	r3, r3, #6
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	4611      	mov	r1, r2
 8001dda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001dde:	623b      	str	r3, [r7, #32]
 8001de0:	2300      	movs	r3, #0
 8001de2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001de4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001de8:	4642      	mov	r2, r8
 8001dea:	464b      	mov	r3, r9
 8001dec:	f04f 0000 	mov.w	r0, #0
 8001df0:	f04f 0100 	mov.w	r1, #0
 8001df4:	0159      	lsls	r1, r3, #5
 8001df6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dfa:	0150      	lsls	r0, r2, #5
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4641      	mov	r1, r8
 8001e02:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e06:	4649      	mov	r1, r9
 8001e08:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	f04f 0300 	mov.w	r3, #0
 8001e14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e20:	ebb2 040a 	subs.w	r4, r2, sl
 8001e24:	eb63 050b 	sbc.w	r5, r3, fp
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	f04f 0300 	mov.w	r3, #0
 8001e30:	00eb      	lsls	r3, r5, #3
 8001e32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e36:	00e2      	lsls	r2, r4, #3
 8001e38:	4614      	mov	r4, r2
 8001e3a:	461d      	mov	r5, r3
 8001e3c:	4643      	mov	r3, r8
 8001e3e:	18e3      	adds	r3, r4, r3
 8001e40:	603b      	str	r3, [r7, #0]
 8001e42:	464b      	mov	r3, r9
 8001e44:	eb45 0303 	adc.w	r3, r5, r3
 8001e48:	607b      	str	r3, [r7, #4]
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e56:	4629      	mov	r1, r5
 8001e58:	028b      	lsls	r3, r1, #10
 8001e5a:	4621      	mov	r1, r4
 8001e5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e60:	4621      	mov	r1, r4
 8001e62:	028a      	lsls	r2, r1, #10
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	61bb      	str	r3, [r7, #24]
 8001e6e:	61fa      	str	r2, [r7, #28]
 8001e70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e74:	f7fe f9a8 	bl	80001c8 <__aeabi_uldivmod>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e80:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	0c1b      	lsrs	r3, r3, #16
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001e90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e9a:	e002      	b.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e9c:	4b05      	ldr	r3, [pc, #20]	@ (8001eb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ea0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ea2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3750      	adds	r7, #80	@ 0x50
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eae:	bf00      	nop
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	00f42400 	.word	0x00f42400
 8001eb8:	007a1200 	.word	0x007a1200

08001ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ec0:	4b03      	ldr	r3, [pc, #12]	@ (8001ed0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	20000000 	.word	0x20000000

08001ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ed8:	f7ff fff0 	bl	8001ebc <HAL_RCC_GetHCLKFreq>
 8001edc:	4602      	mov	r2, r0
 8001ede:	4b05      	ldr	r3, [pc, #20]	@ (8001ef4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	0a9b      	lsrs	r3, r3, #10
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	4903      	ldr	r1, [pc, #12]	@ (8001ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eea:	5ccb      	ldrb	r3, [r1, r3]
 8001eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	08002dcc 	.word	0x08002dcc

08001efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001f00:	f7ff ffdc 	bl	8001ebc <HAL_RCC_GetHCLKFreq>
 8001f04:	4602      	mov	r2, r0
 8001f06:	4b05      	ldr	r3, [pc, #20]	@ (8001f1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	0b5b      	lsrs	r3, r3, #13
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	4903      	ldr	r1, [pc, #12]	@ (8001f20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f12:	5ccb      	ldrb	r3, [r1, r3]
 8001f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	08002dcc 	.word	0x08002dcc

08001f24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e03f      	b.n	8001fb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d106      	bne.n	8001f50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7fe fd06 	bl	800095c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2224      	movs	r2, #36	@ 0x24
 8001f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	68da      	ldr	r2, [r3, #12]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 fc7b 	bl	8002864 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	691a      	ldr	r2, [r3, #16]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	695a      	ldr	r2, [r3, #20]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68da      	ldr	r2, [r3, #12]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2220      	movs	r2, #32
 8001fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b0ba      	sub	sp, #232	@ 0xe8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001ffe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d10f      	bne.n	8002026 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800200a:	f003 0320 	and.w	r3, r3, #32
 800200e:	2b00      	cmp	r3, #0
 8002010:	d009      	beq.n	8002026 <HAL_UART_IRQHandler+0x66>
 8002012:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002016:	f003 0320 	and.w	r3, r3, #32
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f000 fb65 	bl	80026ee <UART_Receive_IT>
      return;
 8002024:	e256      	b.n	80024d4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002026:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 80de 	beq.w	80021ec <HAL_UART_IRQHandler+0x22c>
 8002030:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b00      	cmp	r3, #0
 800203a:	d106      	bne.n	800204a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800203c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002040:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002044:	2b00      	cmp	r3, #0
 8002046:	f000 80d1 	beq.w	80021ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800204a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00b      	beq.n	800206e <HAL_UART_IRQHandler+0xae>
 8002056:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800205a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800205e:	2b00      	cmp	r3, #0
 8002060:	d005      	beq.n	800206e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002066:	f043 0201 	orr.w	r2, r3, #1
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800206e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00b      	beq.n	8002092 <HAL_UART_IRQHandler+0xd2>
 800207a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800207e:	f003 0301 	and.w	r3, r3, #1
 8002082:	2b00      	cmp	r3, #0
 8002084:	d005      	beq.n	8002092 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208a:	f043 0202 	orr.w	r2, r3, #2
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00b      	beq.n	80020b6 <HAL_UART_IRQHandler+0xf6>
 800209e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d005      	beq.n	80020b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ae:	f043 0204 	orr.w	r2, r3, #4
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80020b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020ba:	f003 0308 	and.w	r3, r3, #8
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d011      	beq.n	80020e6 <HAL_UART_IRQHandler+0x126>
 80020c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020c6:	f003 0320 	and.w	r3, r3, #32
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d105      	bne.n	80020da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80020ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d005      	beq.n	80020e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020de:	f043 0208 	orr.w	r2, r3, #8
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	f000 81ed 	beq.w	80024ca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020f4:	f003 0320 	and.w	r3, r3, #32
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d008      	beq.n	800210e <HAL_UART_IRQHandler+0x14e>
 80020fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002100:	f003 0320 	and.w	r3, r3, #32
 8002104:	2b00      	cmp	r3, #0
 8002106:	d002      	beq.n	800210e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 faf0 	bl	80026ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	695b      	ldr	r3, [r3, #20]
 8002114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002118:	2b40      	cmp	r3, #64	@ 0x40
 800211a:	bf0c      	ite	eq
 800211c:	2301      	moveq	r3, #1
 800211e:	2300      	movne	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d103      	bne.n	800213a <HAL_UART_IRQHandler+0x17a>
 8002132:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002136:	2b00      	cmp	r3, #0
 8002138:	d04f      	beq.n	80021da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f9f8 	bl	8002530 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800214a:	2b40      	cmp	r3, #64	@ 0x40
 800214c:	d141      	bne.n	80021d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	3314      	adds	r3, #20
 8002154:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002158:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800215c:	e853 3f00 	ldrex	r3, [r3]
 8002160:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002164:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002168:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800216c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	3314      	adds	r3, #20
 8002176:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800217a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800217e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002182:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002186:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800218a:	e841 2300 	strex	r3, r2, [r1]
 800218e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002192:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1d9      	bne.n	800214e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d013      	beq.n	80021ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021a6:	4a7d      	ldr	r2, [pc, #500]	@ (800239c <HAL_UART_IRQHandler+0x3dc>)
 80021a8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff f861 	bl	8001276 <HAL_DMA_Abort_IT>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d016      	beq.n	80021e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80021c4:	4610      	mov	r0, r2
 80021c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021c8:	e00e      	b.n	80021e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f99a 	bl	8002504 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021d0:	e00a      	b.n	80021e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f000 f996 	bl	8002504 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021d8:	e006      	b.n	80021e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f992 	bl	8002504 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 80021e6:	e170      	b.n	80024ca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021e8:	bf00      	nop
    return;
 80021ea:	e16e      	b.n	80024ca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	f040 814a 	bne.w	800248a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80021f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021fa:	f003 0310 	and.w	r3, r3, #16
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 8143 	beq.w	800248a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002208:	f003 0310 	and.w	r3, r3, #16
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 813c 	beq.w	800248a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002212:	2300      	movs	r3, #0
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	60bb      	str	r3, [r7, #8]
 8002226:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002232:	2b40      	cmp	r3, #64	@ 0x40
 8002234:	f040 80b4 	bne.w	80023a0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002244:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 8140 	beq.w	80024ce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002252:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002256:	429a      	cmp	r2, r3
 8002258:	f080 8139 	bcs.w	80024ce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002262:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002268:	69db      	ldr	r3, [r3, #28]
 800226a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800226e:	f000 8088 	beq.w	8002382 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	330c      	adds	r3, #12
 8002278:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800227c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002280:	e853 3f00 	ldrex	r3, [r3]
 8002284:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002288:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800228c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002290:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	330c      	adds	r3, #12
 800229a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800229e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80022a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80022aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80022ae:	e841 2300 	strex	r3, r2, [r1]
 80022b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80022b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1d9      	bne.n	8002272 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	3314      	adds	r3, #20
 80022c4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022c8:	e853 3f00 	ldrex	r3, [r3]
 80022cc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80022ce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022d0:	f023 0301 	bic.w	r3, r3, #1
 80022d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	3314      	adds	r3, #20
 80022de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80022e2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80022e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022e8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80022ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80022ee:	e841 2300 	strex	r3, r2, [r1]
 80022f2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80022f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1e1      	bne.n	80022be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	3314      	adds	r3, #20
 8002300:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002302:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002304:	e853 3f00 	ldrex	r3, [r3]
 8002308:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800230a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800230c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002310:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	3314      	adds	r3, #20
 800231a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800231e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002320:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002322:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002324:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002326:	e841 2300 	strex	r3, r2, [r1]
 800232a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800232c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1e3      	bne.n	80022fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2220      	movs	r2, #32
 8002336:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	330c      	adds	r3, #12
 8002346:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002348:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800234a:	e853 3f00 	ldrex	r3, [r3]
 800234e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002350:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002352:	f023 0310 	bic.w	r3, r3, #16
 8002356:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	330c      	adds	r3, #12
 8002360:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002364:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002366:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002368:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800236a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800236c:	e841 2300 	strex	r3, r2, [r1]
 8002370:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002372:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1e3      	bne.n	8002340 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe ff0a 	bl	8001196 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800238a:	b29b      	uxth	r3, r3
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	b29b      	uxth	r3, r3
 8002390:	4619      	mov	r1, r3
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f8c0 	bl	8002518 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002398:	e099      	b.n	80024ce <HAL_UART_IRQHandler+0x50e>
 800239a:	bf00      	nop
 800239c:	080025f7 	.word	0x080025f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 808b 	beq.w	80024d2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80023bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 8086 	beq.w	80024d2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	330c      	adds	r3, #12
 80023cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023d0:	e853 3f00 	ldrex	r3, [r3]
 80023d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80023d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80023dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	330c      	adds	r3, #12
 80023e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80023ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80023ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80023f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80023f2:	e841 2300 	strex	r3, r2, [r1]
 80023f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80023f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1e3      	bne.n	80023c6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	3314      	adds	r3, #20
 8002404:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002408:	e853 3f00 	ldrex	r3, [r3]
 800240c:	623b      	str	r3, [r7, #32]
   return(result);
 800240e:	6a3b      	ldr	r3, [r7, #32]
 8002410:	f023 0301 	bic.w	r3, r3, #1
 8002414:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	3314      	adds	r3, #20
 800241e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002422:	633a      	str	r2, [r7, #48]	@ 0x30
 8002424:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002426:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002428:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800242a:	e841 2300 	strex	r3, r2, [r1]
 800242e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1e3      	bne.n	80023fe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2220      	movs	r2, #32
 800243a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	330c      	adds	r3, #12
 800244a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	e853 3f00 	ldrex	r3, [r3]
 8002452:	60fb      	str	r3, [r7, #12]
   return(result);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f023 0310 	bic.w	r3, r3, #16
 800245a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	330c      	adds	r3, #12
 8002464:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002468:	61fa      	str	r2, [r7, #28]
 800246a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800246c:	69b9      	ldr	r1, [r7, #24]
 800246e:	69fa      	ldr	r2, [r7, #28]
 8002470:	e841 2300 	strex	r3, r2, [r1]
 8002474:	617b      	str	r3, [r7, #20]
   return(result);
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1e3      	bne.n	8002444 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800247c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002480:	4619      	mov	r1, r3
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f848 	bl	8002518 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002488:	e023      	b.n	80024d2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800248a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800248e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002492:	2b00      	cmp	r3, #0
 8002494:	d009      	beq.n	80024aa <HAL_UART_IRQHandler+0x4ea>
 8002496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800249a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f8bb 	bl	800261e <UART_Transmit_IT>
    return;
 80024a8:	e014      	b.n	80024d4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80024aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00e      	beq.n	80024d4 <HAL_UART_IRQHandler+0x514>
 80024b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d008      	beq.n	80024d4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f8fb 	bl	80026be <UART_EndTransmit_IT>
    return;
 80024c8:	e004      	b.n	80024d4 <HAL_UART_IRQHandler+0x514>
    return;
 80024ca:	bf00      	nop
 80024cc:	e002      	b.n	80024d4 <HAL_UART_IRQHandler+0x514>
      return;
 80024ce:	bf00      	nop
 80024d0:	e000      	b.n	80024d4 <HAL_UART_IRQHandler+0x514>
      return;
 80024d2:	bf00      	nop
  }
}
 80024d4:	37e8      	adds	r7, #232	@ 0xe8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop

080024dc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002524:	bf00      	nop
 8002526:	370c      	adds	r7, #12
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002530:	b480      	push	{r7}
 8002532:	b095      	sub	sp, #84	@ 0x54
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	330c      	adds	r3, #12
 800253e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002542:	e853 3f00 	ldrex	r3, [r3]
 8002546:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800254a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800254e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	330c      	adds	r3, #12
 8002556:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002558:	643a      	str	r2, [r7, #64]	@ 0x40
 800255a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800255c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800255e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002560:	e841 2300 	strex	r3, r2, [r1]
 8002564:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1e5      	bne.n	8002538 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	3314      	adds	r3, #20
 8002572:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002574:	6a3b      	ldr	r3, [r7, #32]
 8002576:	e853 3f00 	ldrex	r3, [r3]
 800257a:	61fb      	str	r3, [r7, #28]
   return(result);
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f023 0301 	bic.w	r3, r3, #1
 8002582:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	3314      	adds	r3, #20
 800258a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800258c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800258e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002590:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002592:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002594:	e841 2300 	strex	r3, r2, [r1]
 8002598:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800259a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1e5      	bne.n	800256c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d119      	bne.n	80025dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	330c      	adds	r3, #12
 80025ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	e853 3f00 	ldrex	r3, [r3]
 80025b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	f023 0310 	bic.w	r3, r3, #16
 80025be:	647b      	str	r3, [r7, #68]	@ 0x44
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	330c      	adds	r3, #12
 80025c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80025c8:	61ba      	str	r2, [r7, #24]
 80025ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025cc:	6979      	ldr	r1, [r7, #20]
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	e841 2300 	strex	r3, r2, [r1]
 80025d4:	613b      	str	r3, [r7, #16]
   return(result);
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1e5      	bne.n	80025a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2220      	movs	r2, #32
 80025e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80025ea:	bf00      	nop
 80025ec:	3754      	adds	r7, #84	@ 0x54
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b084      	sub	sp, #16
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002602:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002610:	68f8      	ldr	r0, [r7, #12]
 8002612:	f7ff ff77 	bl	8002504 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002616:	bf00      	nop
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800261e:	b480      	push	{r7}
 8002620:	b085      	sub	sp, #20
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b21      	cmp	r3, #33	@ 0x21
 8002630:	d13e      	bne.n	80026b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800263a:	d114      	bne.n	8002666 <UART_Transmit_IT+0x48>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d110      	bne.n	8002666 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	881b      	ldrh	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002658:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	1c9a      	adds	r2, r3, #2
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	621a      	str	r2, [r3, #32]
 8002664:	e008      	b.n	8002678 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	1c59      	adds	r1, r3, #1
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6211      	str	r1, [r2, #32]
 8002670:	781a      	ldrb	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800267c:	b29b      	uxth	r3, r3
 800267e:	3b01      	subs	r3, #1
 8002680:	b29b      	uxth	r3, r3
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	4619      	mov	r1, r3
 8002686:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10f      	bne.n	80026ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800269a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68da      	ldr	r2, [r3, #12]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80026ac:	2300      	movs	r3, #0
 80026ae:	e000      	b.n	80026b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80026b0:	2302      	movs	r3, #2
  }
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3714      	adds	r7, #20
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b082      	sub	sp, #8
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68da      	ldr	r2, [r3, #12]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2220      	movs	r2, #32
 80026da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff fefc 	bl	80024dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b08c      	sub	sp, #48	@ 0x30
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b22      	cmp	r3, #34	@ 0x22
 8002700:	f040 80ab 	bne.w	800285a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800270c:	d117      	bne.n	800273e <UART_Receive_IT+0x50>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d113      	bne.n	800273e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002716:	2300      	movs	r3, #0
 8002718:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800271e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	b29b      	uxth	r3, r3
 8002728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800272c:	b29a      	uxth	r2, r3
 800272e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002730:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002736:	1c9a      	adds	r2, r3, #2
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	629a      	str	r2, [r3, #40]	@ 0x28
 800273c:	e026      	b.n	800278c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002742:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002744:	2300      	movs	r3, #0
 8002746:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002750:	d007      	beq.n	8002762 <UART_Receive_IT+0x74>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10a      	bne.n	8002770 <UART_Receive_IT+0x82>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d106      	bne.n	8002770 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	b2da      	uxtb	r2, r3
 800276a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800276c:	701a      	strb	r2, [r3, #0]
 800276e:	e008      	b.n	8002782 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	b2db      	uxtb	r3, r3
 8002778:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800277c:	b2da      	uxtb	r2, r3
 800277e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002780:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002790:	b29b      	uxth	r3, r3
 8002792:	3b01      	subs	r3, #1
 8002794:	b29b      	uxth	r3, r3
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	4619      	mov	r1, r3
 800279a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800279c:	2b00      	cmp	r3, #0
 800279e:	d15a      	bne.n	8002856 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68da      	ldr	r2, [r3, #12]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0220 	bic.w	r2, r2, #32
 80027ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68da      	ldr	r2, [r3, #12]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695a      	ldr	r2, [r3, #20]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f022 0201 	bic.w	r2, r2, #1
 80027ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d135      	bne.n	800284c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	330c      	adds	r3, #12
 80027ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	e853 3f00 	ldrex	r3, [r3]
 80027f4:	613b      	str	r3, [r7, #16]
   return(result);
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	f023 0310 	bic.w	r3, r3, #16
 80027fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	330c      	adds	r3, #12
 8002804:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002806:	623a      	str	r2, [r7, #32]
 8002808:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800280a:	69f9      	ldr	r1, [r7, #28]
 800280c:	6a3a      	ldr	r2, [r7, #32]
 800280e:	e841 2300 	strex	r3, r2, [r1]
 8002812:	61bb      	str	r3, [r7, #24]
   return(result);
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d1e5      	bne.n	80027e6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0310 	and.w	r3, r3, #16
 8002824:	2b10      	cmp	r3, #16
 8002826:	d10a      	bne.n	800283e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002828:	2300      	movs	r3, #0
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002842:	4619      	mov	r1, r3
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7ff fe67 	bl	8002518 <HAL_UARTEx_RxEventCallback>
 800284a:	e002      	b.n	8002852 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff fe4f 	bl	80024f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002852:	2300      	movs	r3, #0
 8002854:	e002      	b.n	800285c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	e000      	b.n	800285c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800285a:	2302      	movs	r3, #2
  }
}
 800285c:	4618      	mov	r0, r3
 800285e:	3730      	adds	r7, #48	@ 0x30
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002868:	b0c0      	sub	sp, #256	@ 0x100
 800286a:	af00      	add	r7, sp, #0
 800286c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	691b      	ldr	r3, [r3, #16]
 8002878:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800287c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002880:	68d9      	ldr	r1, [r3, #12]
 8002882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	ea40 0301 	orr.w	r3, r0, r1
 800288c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800288e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	431a      	orrs	r2, r3
 800289c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	431a      	orrs	r2, r3
 80028a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80028b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80028bc:	f021 010c 	bic.w	r1, r1, #12
 80028c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80028ca:	430b      	orrs	r3, r1
 80028cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80028da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028de:	6999      	ldr	r1, [r3, #24]
 80028e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	ea40 0301 	orr.w	r3, r0, r1
 80028ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	4b8f      	ldr	r3, [pc, #572]	@ (8002b30 <UART_SetConfig+0x2cc>)
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d005      	beq.n	8002904 <UART_SetConfig+0xa0>
 80028f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	4b8d      	ldr	r3, [pc, #564]	@ (8002b34 <UART_SetConfig+0x2d0>)
 8002900:	429a      	cmp	r2, r3
 8002902:	d104      	bne.n	800290e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002904:	f7ff fafa 	bl	8001efc <HAL_RCC_GetPCLK2Freq>
 8002908:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800290c:	e003      	b.n	8002916 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800290e:	f7ff fae1 	bl	8001ed4 <HAL_RCC_GetPCLK1Freq>
 8002912:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002920:	f040 810c 	bne.w	8002b3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002924:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002928:	2200      	movs	r2, #0
 800292a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800292e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002932:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002936:	4622      	mov	r2, r4
 8002938:	462b      	mov	r3, r5
 800293a:	1891      	adds	r1, r2, r2
 800293c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800293e:	415b      	adcs	r3, r3
 8002940:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002942:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002946:	4621      	mov	r1, r4
 8002948:	eb12 0801 	adds.w	r8, r2, r1
 800294c:	4629      	mov	r1, r5
 800294e:	eb43 0901 	adc.w	r9, r3, r1
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	f04f 0300 	mov.w	r3, #0
 800295a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800295e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002962:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002966:	4690      	mov	r8, r2
 8002968:	4699      	mov	r9, r3
 800296a:	4623      	mov	r3, r4
 800296c:	eb18 0303 	adds.w	r3, r8, r3
 8002970:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002974:	462b      	mov	r3, r5
 8002976:	eb49 0303 	adc.w	r3, r9, r3
 800297a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800297e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800298a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800298e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002992:	460b      	mov	r3, r1
 8002994:	18db      	adds	r3, r3, r3
 8002996:	653b      	str	r3, [r7, #80]	@ 0x50
 8002998:	4613      	mov	r3, r2
 800299a:	eb42 0303 	adc.w	r3, r2, r3
 800299e:	657b      	str	r3, [r7, #84]	@ 0x54
 80029a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80029a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80029a8:	f7fd fc0e 	bl	80001c8 <__aeabi_uldivmod>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4b61      	ldr	r3, [pc, #388]	@ (8002b38 <UART_SetConfig+0x2d4>)
 80029b2:	fba3 2302 	umull	r2, r3, r3, r2
 80029b6:	095b      	lsrs	r3, r3, #5
 80029b8:	011c      	lsls	r4, r3, #4
 80029ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029be:	2200      	movs	r2, #0
 80029c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80029c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80029c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80029cc:	4642      	mov	r2, r8
 80029ce:	464b      	mov	r3, r9
 80029d0:	1891      	adds	r1, r2, r2
 80029d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80029d4:	415b      	adcs	r3, r3
 80029d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80029dc:	4641      	mov	r1, r8
 80029de:	eb12 0a01 	adds.w	sl, r2, r1
 80029e2:	4649      	mov	r1, r9
 80029e4:	eb43 0b01 	adc.w	fp, r3, r1
 80029e8:	f04f 0200 	mov.w	r2, #0
 80029ec:	f04f 0300 	mov.w	r3, #0
 80029f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029fc:	4692      	mov	sl, r2
 80029fe:	469b      	mov	fp, r3
 8002a00:	4643      	mov	r3, r8
 8002a02:	eb1a 0303 	adds.w	r3, sl, r3
 8002a06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a0a:	464b      	mov	r3, r9
 8002a0c:	eb4b 0303 	adc.w	r3, fp, r3
 8002a10:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a20:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002a24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	18db      	adds	r3, r3, r3
 8002a2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a2e:	4613      	mov	r3, r2
 8002a30:	eb42 0303 	adc.w	r3, r2, r3
 8002a34:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002a3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002a3e:	f7fd fbc3 	bl	80001c8 <__aeabi_uldivmod>
 8002a42:	4602      	mov	r2, r0
 8002a44:	460b      	mov	r3, r1
 8002a46:	4611      	mov	r1, r2
 8002a48:	4b3b      	ldr	r3, [pc, #236]	@ (8002b38 <UART_SetConfig+0x2d4>)
 8002a4a:	fba3 2301 	umull	r2, r3, r3, r1
 8002a4e:	095b      	lsrs	r3, r3, #5
 8002a50:	2264      	movs	r2, #100	@ 0x64
 8002a52:	fb02 f303 	mul.w	r3, r2, r3
 8002a56:	1acb      	subs	r3, r1, r3
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002a5e:	4b36      	ldr	r3, [pc, #216]	@ (8002b38 <UART_SetConfig+0x2d4>)
 8002a60:	fba3 2302 	umull	r2, r3, r3, r2
 8002a64:	095b      	lsrs	r3, r3, #5
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002a6c:	441c      	add	r4, r3
 8002a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a72:	2200      	movs	r2, #0
 8002a74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a78:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002a7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002a80:	4642      	mov	r2, r8
 8002a82:	464b      	mov	r3, r9
 8002a84:	1891      	adds	r1, r2, r2
 8002a86:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002a88:	415b      	adcs	r3, r3
 8002a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002a90:	4641      	mov	r1, r8
 8002a92:	1851      	adds	r1, r2, r1
 8002a94:	6339      	str	r1, [r7, #48]	@ 0x30
 8002a96:	4649      	mov	r1, r9
 8002a98:	414b      	adcs	r3, r1
 8002a9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	f04f 0300 	mov.w	r3, #0
 8002aa4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002aa8:	4659      	mov	r1, fp
 8002aaa:	00cb      	lsls	r3, r1, #3
 8002aac:	4651      	mov	r1, sl
 8002aae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ab2:	4651      	mov	r1, sl
 8002ab4:	00ca      	lsls	r2, r1, #3
 8002ab6:	4610      	mov	r0, r2
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4603      	mov	r3, r0
 8002abc:	4642      	mov	r2, r8
 8002abe:	189b      	adds	r3, r3, r2
 8002ac0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ac4:	464b      	mov	r3, r9
 8002ac6:	460a      	mov	r2, r1
 8002ac8:	eb42 0303 	adc.w	r3, r2, r3
 8002acc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002adc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002ae0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	18db      	adds	r3, r3, r3
 8002ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002aea:	4613      	mov	r3, r2
 8002aec:	eb42 0303 	adc.w	r3, r2, r3
 8002af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002af2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002af6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002afa:	f7fd fb65 	bl	80001c8 <__aeabi_uldivmod>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	4b0d      	ldr	r3, [pc, #52]	@ (8002b38 <UART_SetConfig+0x2d4>)
 8002b04:	fba3 1302 	umull	r1, r3, r3, r2
 8002b08:	095b      	lsrs	r3, r3, #5
 8002b0a:	2164      	movs	r1, #100	@ 0x64
 8002b0c:	fb01 f303 	mul.w	r3, r1, r3
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	3332      	adds	r3, #50	@ 0x32
 8002b16:	4a08      	ldr	r2, [pc, #32]	@ (8002b38 <UART_SetConfig+0x2d4>)
 8002b18:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1c:	095b      	lsrs	r3, r3, #5
 8002b1e:	f003 0207 	and.w	r2, r3, #7
 8002b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4422      	add	r2, r4
 8002b2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b2c:	e106      	b.n	8002d3c <UART_SetConfig+0x4d8>
 8002b2e:	bf00      	nop
 8002b30:	40011000 	.word	0x40011000
 8002b34:	40011400 	.word	0x40011400
 8002b38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b40:	2200      	movs	r2, #0
 8002b42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002b46:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002b4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002b4e:	4642      	mov	r2, r8
 8002b50:	464b      	mov	r3, r9
 8002b52:	1891      	adds	r1, r2, r2
 8002b54:	6239      	str	r1, [r7, #32]
 8002b56:	415b      	adcs	r3, r3
 8002b58:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b5e:	4641      	mov	r1, r8
 8002b60:	1854      	adds	r4, r2, r1
 8002b62:	4649      	mov	r1, r9
 8002b64:	eb43 0501 	adc.w	r5, r3, r1
 8002b68:	f04f 0200 	mov.w	r2, #0
 8002b6c:	f04f 0300 	mov.w	r3, #0
 8002b70:	00eb      	lsls	r3, r5, #3
 8002b72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b76:	00e2      	lsls	r2, r4, #3
 8002b78:	4614      	mov	r4, r2
 8002b7a:	461d      	mov	r5, r3
 8002b7c:	4643      	mov	r3, r8
 8002b7e:	18e3      	adds	r3, r4, r3
 8002b80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b84:	464b      	mov	r3, r9
 8002b86:	eb45 0303 	adc.w	r3, r5, r3
 8002b8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002b9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	f04f 0300 	mov.w	r3, #0
 8002ba6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002baa:	4629      	mov	r1, r5
 8002bac:	008b      	lsls	r3, r1, #2
 8002bae:	4621      	mov	r1, r4
 8002bb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bb4:	4621      	mov	r1, r4
 8002bb6:	008a      	lsls	r2, r1, #2
 8002bb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002bbc:	f7fd fb04 	bl	80001c8 <__aeabi_uldivmod>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4b60      	ldr	r3, [pc, #384]	@ (8002d48 <UART_SetConfig+0x4e4>)
 8002bc6:	fba3 2302 	umull	r2, r3, r3, r2
 8002bca:	095b      	lsrs	r3, r3, #5
 8002bcc:	011c      	lsls	r4, r3, #4
 8002bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002bd8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002bdc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002be0:	4642      	mov	r2, r8
 8002be2:	464b      	mov	r3, r9
 8002be4:	1891      	adds	r1, r2, r2
 8002be6:	61b9      	str	r1, [r7, #24]
 8002be8:	415b      	adcs	r3, r3
 8002bea:	61fb      	str	r3, [r7, #28]
 8002bec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bf0:	4641      	mov	r1, r8
 8002bf2:	1851      	adds	r1, r2, r1
 8002bf4:	6139      	str	r1, [r7, #16]
 8002bf6:	4649      	mov	r1, r9
 8002bf8:	414b      	adcs	r3, r1
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	f04f 0200 	mov.w	r2, #0
 8002c00:	f04f 0300 	mov.w	r3, #0
 8002c04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c08:	4659      	mov	r1, fp
 8002c0a:	00cb      	lsls	r3, r1, #3
 8002c0c:	4651      	mov	r1, sl
 8002c0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c12:	4651      	mov	r1, sl
 8002c14:	00ca      	lsls	r2, r1, #3
 8002c16:	4610      	mov	r0, r2
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	4642      	mov	r2, r8
 8002c1e:	189b      	adds	r3, r3, r2
 8002c20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c24:	464b      	mov	r3, r9
 8002c26:	460a      	mov	r2, r1
 8002c28:	eb42 0303 	adc.w	r3, r2, r3
 8002c2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c3a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002c48:	4649      	mov	r1, r9
 8002c4a:	008b      	lsls	r3, r1, #2
 8002c4c:	4641      	mov	r1, r8
 8002c4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c52:	4641      	mov	r1, r8
 8002c54:	008a      	lsls	r2, r1, #2
 8002c56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002c5a:	f7fd fab5 	bl	80001c8 <__aeabi_uldivmod>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	460b      	mov	r3, r1
 8002c62:	4611      	mov	r1, r2
 8002c64:	4b38      	ldr	r3, [pc, #224]	@ (8002d48 <UART_SetConfig+0x4e4>)
 8002c66:	fba3 2301 	umull	r2, r3, r3, r1
 8002c6a:	095b      	lsrs	r3, r3, #5
 8002c6c:	2264      	movs	r2, #100	@ 0x64
 8002c6e:	fb02 f303 	mul.w	r3, r2, r3
 8002c72:	1acb      	subs	r3, r1, r3
 8002c74:	011b      	lsls	r3, r3, #4
 8002c76:	3332      	adds	r3, #50	@ 0x32
 8002c78:	4a33      	ldr	r2, [pc, #204]	@ (8002d48 <UART_SetConfig+0x4e4>)
 8002c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7e:	095b      	lsrs	r3, r3, #5
 8002c80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c84:	441c      	add	r4, r3
 8002c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c8e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c90:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002c94:	4642      	mov	r2, r8
 8002c96:	464b      	mov	r3, r9
 8002c98:	1891      	adds	r1, r2, r2
 8002c9a:	60b9      	str	r1, [r7, #8]
 8002c9c:	415b      	adcs	r3, r3
 8002c9e:	60fb      	str	r3, [r7, #12]
 8002ca0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ca4:	4641      	mov	r1, r8
 8002ca6:	1851      	adds	r1, r2, r1
 8002ca8:	6039      	str	r1, [r7, #0]
 8002caa:	4649      	mov	r1, r9
 8002cac:	414b      	adcs	r3, r1
 8002cae:	607b      	str	r3, [r7, #4]
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	f04f 0300 	mov.w	r3, #0
 8002cb8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002cbc:	4659      	mov	r1, fp
 8002cbe:	00cb      	lsls	r3, r1, #3
 8002cc0:	4651      	mov	r1, sl
 8002cc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cc6:	4651      	mov	r1, sl
 8002cc8:	00ca      	lsls	r2, r1, #3
 8002cca:	4610      	mov	r0, r2
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4603      	mov	r3, r0
 8002cd0:	4642      	mov	r2, r8
 8002cd2:	189b      	adds	r3, r3, r2
 8002cd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002cd6:	464b      	mov	r3, r9
 8002cd8:	460a      	mov	r2, r1
 8002cda:	eb42 0303 	adc.w	r3, r2, r3
 8002cde:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cea:	667a      	str	r2, [r7, #100]	@ 0x64
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002cf8:	4649      	mov	r1, r9
 8002cfa:	008b      	lsls	r3, r1, #2
 8002cfc:	4641      	mov	r1, r8
 8002cfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d02:	4641      	mov	r1, r8
 8002d04:	008a      	lsls	r2, r1, #2
 8002d06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002d0a:	f7fd fa5d 	bl	80001c8 <__aeabi_uldivmod>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	4b0d      	ldr	r3, [pc, #52]	@ (8002d48 <UART_SetConfig+0x4e4>)
 8002d14:	fba3 1302 	umull	r1, r3, r3, r2
 8002d18:	095b      	lsrs	r3, r3, #5
 8002d1a:	2164      	movs	r1, #100	@ 0x64
 8002d1c:	fb01 f303 	mul.w	r3, r1, r3
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	3332      	adds	r3, #50	@ 0x32
 8002d26:	4a08      	ldr	r2, [pc, #32]	@ (8002d48 <UART_SetConfig+0x4e4>)
 8002d28:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2c:	095b      	lsrs	r3, r3, #5
 8002d2e:	f003 020f 	and.w	r2, r3, #15
 8002d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4422      	add	r2, r4
 8002d3a:	609a      	str	r2, [r3, #8]
}
 8002d3c:	bf00      	nop
 8002d3e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002d42:	46bd      	mov	sp, r7
 8002d44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d48:	51eb851f 	.word	0x51eb851f

08002d4c <memset>:
 8002d4c:	4402      	add	r2, r0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d100      	bne.n	8002d56 <memset+0xa>
 8002d54:	4770      	bx	lr
 8002d56:	f803 1b01 	strb.w	r1, [r3], #1
 8002d5a:	e7f9      	b.n	8002d50 <memset+0x4>

08002d5c <__libc_init_array>:
 8002d5c:	b570      	push	{r4, r5, r6, lr}
 8002d5e:	4d0d      	ldr	r5, [pc, #52]	@ (8002d94 <__libc_init_array+0x38>)
 8002d60:	4c0d      	ldr	r4, [pc, #52]	@ (8002d98 <__libc_init_array+0x3c>)
 8002d62:	1b64      	subs	r4, r4, r5
 8002d64:	10a4      	asrs	r4, r4, #2
 8002d66:	2600      	movs	r6, #0
 8002d68:	42a6      	cmp	r6, r4
 8002d6a:	d109      	bne.n	8002d80 <__libc_init_array+0x24>
 8002d6c:	4d0b      	ldr	r5, [pc, #44]	@ (8002d9c <__libc_init_array+0x40>)
 8002d6e:	4c0c      	ldr	r4, [pc, #48]	@ (8002da0 <__libc_init_array+0x44>)
 8002d70:	f000 f818 	bl	8002da4 <_init>
 8002d74:	1b64      	subs	r4, r4, r5
 8002d76:	10a4      	asrs	r4, r4, #2
 8002d78:	2600      	movs	r6, #0
 8002d7a:	42a6      	cmp	r6, r4
 8002d7c:	d105      	bne.n	8002d8a <__libc_init_array+0x2e>
 8002d7e:	bd70      	pop	{r4, r5, r6, pc}
 8002d80:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d84:	4798      	blx	r3
 8002d86:	3601      	adds	r6, #1
 8002d88:	e7ee      	b.n	8002d68 <__libc_init_array+0xc>
 8002d8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d8e:	4798      	blx	r3
 8002d90:	3601      	adds	r6, #1
 8002d92:	e7f2      	b.n	8002d7a <__libc_init_array+0x1e>
 8002d94:	08002ddc 	.word	0x08002ddc
 8002d98:	08002ddc 	.word	0x08002ddc
 8002d9c:	08002ddc 	.word	0x08002ddc
 8002da0:	08002de0 	.word	0x08002de0

08002da4 <_init>:
 8002da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002da6:	bf00      	nop
 8002da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002daa:	bc08      	pop	{r3}
 8002dac:	469e      	mov	lr, r3
 8002dae:	4770      	bx	lr

08002db0 <_fini>:
 8002db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db2:	bf00      	nop
 8002db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002db6:	bc08      	pop	{r3}
 8002db8:	469e      	mov	lr, r3
 8002dba:	4770      	bx	lr
